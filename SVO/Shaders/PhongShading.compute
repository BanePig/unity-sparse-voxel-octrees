#pragma kernel cs_main

RWTexture2D<float4> result_texture;
RWTexture2D<float4> diffuse_texture;
RWTexture2D<float3> position_texture;
RWTexture2D<float3> normal_texture;
RWTexture2D<float> shadow_texture;

float mat_shininess;
float mat_roughness;
float3 sun_direction;
float3 sun_diffuse;
float3 sun_specular;

float3 ambient_light;

float3 cam_pos;

[numthreads(16,16,1)]
void cs_main(uint3 id : SV_DispatchThreadID)
{
    // Dimensions of non-shadow texture
    uint width, height;
    diffuse_texture.GetDimensions(width, height);
    
    uint shadow_width, shadow_height;
    shadow_texture.GetDimensions(shadow_width, shadow_height);
    uint2 shadow_sample = uint2(id.x * shadow_width / width, id.y * shadow_height / height);
    float shadow_strength = shadow_texture[shadow_sample];
    
    float3 normal = (normal_texture[id.xy] - float3(.5f, .5f, .5f)) * 2.f;
    float4 diffuse = diffuse_texture[id.xy];
    
    float3 ray_dir = normalize(position_texture[id.xy] - cam_pos);

    float3 effective_sun_diffuse = sun_diffuse * max(dot(-normal, sun_direction), 0) * shadow_strength;
    //float3 effective_sun_diffuse = sun_diffuse * shadow_strength;
    
    float3 sun_reflection = reflect(-sun_direction, normal);
    float spec_strength = max(dot(sun_reflection, ray_dir), 0.f) * (1 - mat_roughness);
    spec_strength = pow(spec_strength, mat_shininess) * shadow_strength;
    float3 effective_sun_specular = sun_specular * spec_strength;

    result_texture[id.xy] = float4(diffuse.xyz * (ambient_light + effective_sun_diffuse) + effective_sun_specular, diffuse.w);
    //result_texture[id.xy] = float4(normal_texture[id.xy].xyz, 1.f);
}